dataframe.resultados.3neu.decay.softmax <- rbind(dataframe.resultados.3neu.decay.softmax, dataframe.pasada)
}
set.seed(1)
dataframe.resultados.5neu <- data.frame(Ent_5Neu = numeric(),
Test_5Neu = numeric())
for(i in 1:20)
{
pacientes.5neu <- nnet( matriz.pacientes.datos.centscal[conjuntoEntrenamiento, 1:24], class.ind( matriz.pacientes.etiquetas[conjuntoEntrenamiento, 25] ) , size=5 )
pacientes.prediccion.5neu <- predict( pacientes.5neu, matriz.pacientes.datos.centscal[conjuntoEntrenamiento, 1:24], type="raw" )
head(pacientes.prediccion.5neu) # Vemos las probabilidades de pertenencia de cada valor
pacientes.prediccion.5neu.class <- apply( pacientes.prediccion.5neu, MARGIN=1, FUN='which.is.max')
pacientes.prediccion.5neu.class
table( pacientes.prediccion.5neu.class, matriz.pacientes.etiquetas[conjuntoEntrenamiento, 25] )  # Lo vemos en forma de tabla.
acierto.teorico.entrenamiento.5neu <- sum( diag( table( pacientes.prediccion.5neu.class, matriz.pacientes.etiquetas[conjuntoEntrenamiento, 25] ) ) )/55 # Esta cuenta nos da el índice de acierto
#TEST
pacientes.prediccion.test.5neu <- predict( pacientes.5neu, matriz.pacientes.datos.centscal[-conjuntoEntrenamiento, 1:24], type="raw" )
pacientes.prediccion.test.5neu
pacientes.prediccion.test.5neu.class <- apply( pacientes.prediccion.test.5neu, MARGIN=1, FUN='which.is.max')
pacientes.prediccion.test.5neu.class
table( pacientes.prediccion.test.5neu.class , matriz.pacientes.etiquetas[-conjuntoEntrenamiento, 25] )
acierto.teorico.test.5neu <- sum( diag( table( pacientes.prediccion.test.5neu.class, matriz.pacientes.etiquetas[-conjuntoEntrenamiento, 25] ) ) )/12
dataframe.pasada <- data.frame(Ent_5Neu = acierto.teorico.entrenamiento.5neu,
Test_5neu = acierto.teorico.test.5neu)
dataframe.resultados.5neu <- rbind(dataframe.resultados.5neu, dataframe.pasada)
}
set.seed(1)
dataframe.resultados.5neu.soft <- data.frame(Ent_5Neu_soft = numeric(),
Test_5Neu_soft = numeric())
for(i in 1:20)
{
pacientes.5neu.softmax <- nnet( matriz.pacientes.datos.centscal[conjuntoEntrenamiento, 1:24], class.ind( matriz.pacientes.etiquetas[conjuntoEntrenamiento, 25] ) , size=5, softmax = T )
pacientes.prediccion.5neu.softmax <- predict( pacientes.5neu.softmax, matriz.pacientes.datos.centscal[conjuntoEntrenamiento, 1:24], type="raw" )
head(pacientes.prediccion.5neu.softmax) # Vemos las probabilidades de pertenencia de cada valor
pacientes.prediccion.5neu.class.softmax <- apply( pacientes.prediccion.5neu.softmax, MARGIN=1, FUN='which.is.max')
pacientes.prediccion.5neu.class.softmax
table( pacientes.prediccion.5neu.class.softmax, matriz.pacientes.etiquetas[conjuntoEntrenamiento, 25] )  # Lo vemos en forma de tabla.
acierto.teorico.ent.5neu.softmax <- sum( diag( table( pacientes.prediccion.5neu.class.softmax, matriz.pacientes.etiquetas[conjuntoEntrenamiento, 25] ) ) )/55 # Esta cuenta nos da el índice de acierto
# TEST
pacientes.prediccion.test.5neu.softmax <- predict( pacientes.5neu.softmax, matriz.pacientes.datos.centscal[-conjuntoEntrenamiento, 1:24], type="raw" )
pacientes.prediccion.test.5neu.softmax
pacientes.prediccion.test.5neu.class.softmax <- apply( pacientes.prediccion.test.5neu.softmax, MARGIN=1, FUN='which.is.max')
pacientes.prediccion.test.5neu.class.softmax
table( pacientes.prediccion.test.5neu.class.softmax, matriz.pacientes.etiquetas[-conjuntoEntrenamiento, 25] )
acierto.teorico.test.5neu.softmax <- sum( diag( table( pacientes.prediccion.test.5neu.class.softmax, matriz.pacientes.etiquetas[-conjuntoEntrenamiento, 25] ) ) )/12
dataframe.pasada <- data.frame(Ent_5Neu_soft = acierto.teorico.ent.5neu.softmax,
Test_5neu_soft = acierto.teorico.test.5neu.softmax)
dataframe.resultados.5neu.soft <- rbind(dataframe.resultados.5neu.soft, dataframe.pasada)
}
set.seed(1)
dataframe.resultados.5neu.decay <- data.frame(Ent_5Neu_decay = numeric(),
Test_5Neu_decay = numeric())
for(i in 1:20)
{
pacientes.5neu.decay <- nnet( matriz.pacientes.datos.centscal[conjuntoEntrenamiento, 1:24], class.ind( matriz.pacientes.etiquetas[conjuntoEntrenamiento, 25] ) , size=5, decay=0.1)
pacientes.prediccion.5neu.decay <- predict( pacientes.5neu.decay, matriz.pacientes.datos.centscal[conjuntoEntrenamiento, 1:24], type="raw" )
head(pacientes.prediccion.5neu.decay) # Vemos las probabilidades de pertenencia de cada valor
pacientes.prediccion.5neu.decay.class <- apply( pacientes.prediccion.5neu.decay, MARGIN=1, FUN='which.is.max')
pacientes.prediccion.5neu.decay.class
table( pacientes.prediccion.5neu.decay.class, matriz.pacientes.etiquetas[conjuntoEntrenamiento, 25] )  # Lo vemos en forma de tabla.
acierto.teorico.ent.5neu.decay <- sum( diag( table( pacientes.prediccion.5neu.decay.class, matriz.pacientes.etiquetas[conjuntoEntrenamiento, 25] ) ) )/55 # Esta cuenta nos da el índice de acierto
# TEST
pacientes.prediccion.test.decay.5neu <- predict( pacientes.5neu.decay, matriz.pacientes.datos.centscal[-conjuntoEntrenamiento, 1:24], type="raw" )
pacientes.prediccion.test.decay.5neu
pacientes.prediccion.test.decay.5neu.class <- apply( pacientes.prediccion.test.decay.5neu, MARGIN=1, FUN='which.is.max')
pacientes.prediccion.test.decay.5neu.class
table( pacientes.prediccion.test.decay.5neu.class , matriz.pacientes.etiquetas[-conjuntoEntrenamiento, 25] )
acierto.teorico.test.5neu.decay <- sum( diag( table( pacientes.prediccion.test.decay.5neu.class, matriz.pacientes.etiquetas[-conjuntoEntrenamiento, 25] ) ) )/12
dataframe.pasada <- data.frame(Ent_5Neu_decay = acierto.teorico.ent.5neu.decay,
Test_5neu_decay = acierto.teorico.test.5neu.decay)
dataframe.resultados.5neu.decay <- rbind(dataframe.resultados.5neu.decay, dataframe.pasada)
}
set.seed(1)
dataframe.resultados.5neu.decay.softmax <- data.frame(Ent_5Neu_decay_sf = numeric(),
Test_5Neu_decay_sf = numeric())
for(i in 1:20)
{
pacientes.5neu.decay.softmax <- nnet( matriz.pacientes.datos.centscal[conjuntoEntrenamiento, 1:24], class.ind( matriz.pacientes.etiquetas[conjuntoEntrenamiento, 25] ) , size=5, softmax = T, decay = 0.05)
pacientes.prediccion.5neu.decay.softmax <- predict( pacientes.5neu.decay.softmax, matriz.pacientes.datos.centscal[conjuntoEntrenamiento, 1:24], type="raw" )
head(pacientes.prediccion.5neu.decay.softmax) # Vemos las probabilidades de pertenencia de cada valor
pacientes.prediccion.5neu.decay.class.softmax <- apply( pacientes.prediccion.5neu.decay.softmax, MARGIN=1, FUN='which.is.max')
pacientes.prediccion.5neu.decay.class.softmax
table( pacientes.prediccion.5neu.decay.class.softmax, matriz.pacientes.etiquetas[conjuntoEntrenamiento, 25] )  # Lo vemos en forma de tabla.
acierto.teorico.ent.5neu.decay.sf <- sum( diag( table( pacientes.prediccion.5neu.decay.class.softmax, matriz.pacientes.etiquetas[conjuntoEntrenamiento, 25] ) ) )/55 # Esta cuenta nos da el índice de acierto
# TEST
pacientes.prediccion.test.decay.5neu.softmax <- predict( pacientes.5neu.decay.softmax, matriz.pacientes.datos.centscal[-conjuntoEntrenamiento, 1:24], type="raw" )
pacientes.prediccion.test.decay.5neu.softmax
pacientes.prediccion.test.decay.5neu.class.softmax <- apply( pacientes.prediccion.test.decay.5neu.softmax, MARGIN=1, FUN='which.is.max')
pacientes.prediccion.test.decay.5neu.class.softmax
table( pacientes.prediccion.test.decay.5neu.class.softmax , matriz.pacientes.etiquetas[-conjuntoEntrenamiento, 25] )
acierto.teorico.test.5neu.decay.sf <- sum( diag( table( pacientes.prediccion.test.decay.5neu.class.softmax, matriz.pacientes.etiquetas[-conjuntoEntrenamiento, 25] ) ) )/12
dataframe.pasada <- data.frame(Ent_5Neu_decay_sf = acierto.teorico.ent.5neu.decay.sf,
Test_5neu_decay_sf = acierto.teorico.test.5neu.decay.sf)
dataframe.resultados.5neu.decay.softmax <- rbind(dataframe.resultados.5neu.decay.softmax, dataframe.pasada)
}
dataframe.resultados.perceptron <- cbind(dataframe.resultados.1neu,
dataframe.resultados.1neu.soft,
dataframe.resultados.2neu,
dataframe.resultados.2neu.soft,
dataframe.resultados.3neu,
dataframe.resultados.3neu.soft,
dataframe.resultados.3neu.decay,
dataframe.resultados.3neu.decay.softmax,
dataframe.resultados.5neu,
dataframe.resultados.5neu.soft,
dataframe.resultados.5neu.decay,
dataframe.resultados.5neu.decay.softmax)
remove(dataframe.resultados.1neu)
remove(dataframe.resultados.1neu.soft)
remove(dataframe.resultados.2neu)
remove(dataframe.resultados.2neu.soft)
remove(dataframe.resultados.3neu)
remove(dataframe.resultados.3neu.soft)
remove(dataframe.resultados.3neu.decay)
remove(dataframe.resultados.3neu.decay.softmax)
remove(dataframe.resultados.5neu)
remove(dataframe.resultados.5neu.soft)
remove(dataframe.resultados.5neu.decay)
remove(dataframe.resultados.5neu.decay.softmax)
# Obtenemos los máximos de cada columna de test y guardamos:
max.1neu <- max(dataframe.resultados.perceptron[, 2])
max.1neu.s <- max(dataframe.resultados.perceptron[, 4])
max.2neu <- max(dataframe.resultados.perceptron[, 6])
max.2neu.s <- max(dataframe.resultados.perceptron[, 8])
max.3neu <- max(dataframe.resultados.perceptron[, 10])
max.3neu.s <- max(dataframe.resultados.perceptron[, 12])
max.3neu.d <- max(dataframe.resultados.perceptron[, 14])
max.3neu.d.s <- max(dataframe.resultados.perceptron[, 16])
max.5neu <- max(dataframe.resultados.perceptron[, 18])
max.5neu.s <- max(dataframe.resultados.perceptron[, 20])
max.5neu.d <- max(dataframe.resultados.perceptron[, 22])
max.5neu.d.s <- max(dataframe.resultados.perceptron[, 24])
array.maximos.perceptron <- c(max.1neu,
max.1neu.s,
max.2neu,
max.2neu.s,
max.3neu,
max.3neu.s,
max.3neu.d,
max.3neu.d.s,
max.5neu,
max.5neu.s,
max.5neu.d,
max.5neu.d.s)
barplot(array.maximos.perceptron,
main = "Mejores Resultados en Test con Perceptrones",
xlab = "Tipo de Perceptrón",
ylab = "Acierto (Tanto por 1)",
names.arg = c("1 Neu", "1 Neu Soft",
"2 Neu", "2 Neu Soft",
"3 Neu", "3 Neu Soft", "3 Neu Decay", "3 Neu Soft Decay",
"5 Neu", "5 Neu Soft", "5 Neu Decay", "5 Neu Soft Decay")
)
pdf("Imágenes Obtenidas/BarplotResultadosPerceptron.pdf")
barplot(array.maximos.perceptron,
main = "Mejores Resultados en Test con Perceptrones",
xlab = "Tipo de Perceptrón",
ylab = "Acierto (Tanto por 1)",
names.arg = c("1 Neu", "1 Neu Soft",
"2 Neu", "2 Neu Soft",
"3 Neu", "3 Neu Soft", "3 Neu Decay", "3 Neu Soft Decay",
"5 Neu", "5 Neu Soft", "5 Neu Decay", "5 Neu Soft Decay")
)
dev.off
dataset.resultados <- read.csv2("Datos/Resultados.txt")
tipos = dataset.resultados[, 1]
real = dataset.resultados[, 2]
practico = dataset.resultados[, 3]
p <- plot_ly(dataset.resultados, x = ~tipos, y = ~real, type = 'bar', name = 'Real') %>% add_trace(y = ~practico, name = 'Práctico') %>% layout(yaxis = list(title = 'Porcentaje'), barmode = 'group')
p
#Mostramos el gráfico interactivo
pdf("Imágenes Obtenidas/BarplotResultadosPerceptronTotales.pdf")
p <- plot_ly(dataset.resultados, x = ~tipos, y = ~real, type = 'bar', name = 'Real')
%>% add_trace(y = ~practico, name = 'Práctico')
tipos = dataset.resultados[, 1]
real = dataset.resultados[, 2]
practico = dataset.resultados[, 3]
p <- plot_ly(dataset.resultados, x = ~tipos, y = ~real, type = 'bar', name = 'Real') %>% add_trace(y = ~practico, name = 'Práctico') %>% layout(yaxis = list(title = 'Porcentaje'), barmode = 'group')
p
#Mostramos el gráfico interactivo
# Para hacer la predicción con knn, voy a coger los grupos de una manera distinta:
conjuntoEntrenamiento = matriz.pacientes.datos.centscal[1:55, 1:24]
conjuntoTest = matriz.pacientes.datos.centscal[56:67, 1:24] # Utilizo por supuesto la matriz de centrado y escalado
etiquetasEntrenamiento = matriz.pacientes.etiquetas[1:55, 25]
etiquetasTest = matriz.pacientes.etiquetas[56:67, 25]
set.seed(2)
prediccion.knn.8 <- knn(train = conjuntoEntrenamiento, test = conjuntoTest, cl = etiquetasEntrenamiento, k = 8)
prediccion.knn.8
CrossTable(x = etiquetasTest , y = prediccion.knn.8, prop.chisq = FALSE)
set.seed(2)
prediccion.knn.6 <- knn(train = conjuntoEntrenamiento, test = conjuntoTest, cl = etiquetasEntrenamiento, k = 6)
prediccion.knn.6
CrossTable(x = etiquetasTest , y = prediccion.knn.6, prop.chisq = FALSE)
set.seed(2)
prediccion.knn.10 <- knn(train = conjuntoEntrenamiento, test = conjuntoTest, cl = etiquetasEntrenamiento, k = 10)
prediccion.knn.10
CrossTable(x = etiquetasTest , y = prediccion.knn.10, prop.chisq = FALSE)
set.seed(3) #Pongo una seed para reproducibilidad
model <- randomForest(as.factor(dataset[, 26]) ~ ., data = dataset[, 2:25], importance = TRUE, ntree = 300)
model
plot(model, main="Random Forest")
varImpPlot(model, main = "Random Forest - MDA y Gini") # Gracias a importance = true
pdf("Imágenes Obtenidas/ResultadosRandomForest.pdf")
plot(model, main="Random Forest")
varImpPlot(model, main = "Random Forest - MDA y Gini")
dev.off
# primero añado el grupo a la matriz, creando una nueva
matriz.pacientes.datos.centscal.grupo <- cbind(matriz.pacientes.datos.centscal, dataset$grupo)
colnames(matriz.pacientes.datos.centscal.grupo)[25] <- "grupo"
set.seed(3)
model_centscal <- randomForest(as.factor(grupo) ~ ., data = matriz.pacientes.datos.centscal.grupo, importance = TRUE, ntree = 200)
model_centscal
plot(model_centscal, main="Random Forest Con Centrado y Escalado")
varImpPlot(model_centscal, main="Random Forest con Centrado y Escalado - MDA y Gini") # Gracias a importance = true
# Lo exporto de nuevo a PDF
pdf("Imágenes Obtenidas/ResultadosRandomForestCentScal.pdf")
plot(model_centscal, main="Random Forest Con Centrado y Escalado")
varImpPlot(model_centscal, main="Random Forest con Centrado y Escalado - MDA y Gini")
dev.off
# Las columnas que son una mayor lacra son las siguientes: Relación Contexto Mala, Pensamiento dicotómico, generalización excesiva, sexo, razonamiento emocional, deberías, asertivo, relación-contexto buena, etiquetado, relación contexto trauma.
dataset.randomforest <- dataset[ , c(-1, -3, -4, -5, -6, -13, -14, -15, -20, -23)]
head(dataset.randomforest)
set.seed(3)
model_new <- randomForest(as.factor(grupo) ~ ., data = dataset.randomforest, importance = TRUE, ntree = 200)
model_new
plot(model_new, main="Random Forest Nuevo")
varImpPlot(model_new, main = "Random Forest Nuevo - MDA y Gini")
pdf("Imágenes Obtenidas/ResultadosRandomForestMejorado.pdf")
plot(model_new, main="Random Forest Nuevo")
varImpPlot(model_new, main = "Random Forest Nuevo - MDA y Gini")
dev.off
set.seed(4)
result <- rfcv(dataset[, 2:26], as.factor(dataset$grupo), cv.fold=10)
head(result)
set.seed(5)
modelo.svm <- svm(matriz.pacientes.datos.centscal, as.factor(dataset[, 26]), kernel = "linear") # Al poner los grupos como factor, estoy consiguiendo que no sean continuos para el modelo, sino "discretos", ya que los factor no son valores que puedan ser continuos. Con esto consigo una clasificación.
summary(modelo.svm)
set.seed(5)
prediccion <- predict(modelo.svm, matriz.pacientes.datos.centscal)
prediccion
matriz.conf <- table(prediccion, dataset[ ,26])
matriz.conf
sum(diag(matriz.conf))/67
set.seed(5)
modelo_svm.radial <- svm(matriz.pacientes.datos.centscal, as.factor(dataset[, 26]), kernel="radial")
summary(modelo_svm.radial)
set.seed(5)
prediccion.radial <- predict(modelo_svm.radial, matriz.pacientes.datos.centscal)
prediccion.radial
matriz.conf.radial <- table(prediccion.radial, dataset[,26])
matriz.conf.radial
sum(diag(matriz.conf.radial))/67
set.seed(6)
dd <- dist(scale(dataset[,2:25]), method = "euclidean") #Nos basamos en la distancia euclídea
hier.clust <- hclust(dd, method = "ward.D2")
colores.dendrograma <- c("red", "orange", "green", "black") # Creamos los colores con los que queremos el cluster
cluster.4 <- cutree(hier.clust, 4) # Cluster jerárquico de 4...
pdf("Imágenes Obtenidas/dendrograma_pacientes.pdf")
plot(as.phylo(hier.clust), type = "fan", tip.color = colores.dendrograma[cluster.4], label.offset = 0.3, cex = 0.8) #Lo pintamos
dev.off()
set.seed(6)
dd <- dist(scale(matriz.pacientes.datos.centscal), method = "euclidean")
hier.clust <- hclust(dd, method = "ward.D2")
colores.dendrograma <- c("red", "orange", "green", "black")
cluster.4 <- cutree(hier.clust, 4)
plot(as.phylo(hier.clust), type = "fan", tip.color = colores.dendrograma[cluster.4], label.offset = 0.3, cex = 0.8)
pdf("Imágenes Obtenidas/dendrograma_pacientes_centscal.pdf")
plot(as.phylo(hier.clust), type = "fan", tip.color = colores.dendrograma[cluster.4], label.offset = 0.3, cex = 0.8)
dev.off()
set.seed(7)
datos.kmeans <- matriz.pacientes.datos # Sin la clasificación dentro del dataset
clusters <- kmeans(datos.kmeans, centers=4)
clusters$centers
prediccion.kmeans <- clusters$cluster
prediccion.kmeans
# Representado sobre las dos componentes principales que más explicación nos dan de las variables
clusplot(datos.kmeans, clusters$cluster, color = TRUE, main = "Representación 2D con Clusplot", labels = 4, xlab = "Comp 1", ylab = "Comp 2")
# Ahora la siguiente representación será con componentes discriminantes, que son las dos dimensiones sobre las que la representación de datos es más linealmente separable respecto a la predicción de grupos que ha hecho KMeans
plotcluster(datos.kmeans, clusters$cluster)
pdf("Imágenes Obtenidas/ResultadosKmeans.pdf")
clusplot(datos.kmeans, clusters$cluster, color = TRUE, main = "Representación 2D con Clusplot", labels = 4, xlab = "Comp 1", ylab = "Comp 2")
plotcluster(datos.kmeans, clusters$cluster)
dev.off
# Lo primero que tengo que hacer es convertir el sexo en un factor si no lo es
matriz.pacientes.datos.rm = matriz.pacientes.datos
matriz.pacientes.datos.rm$sex <- as.factor(matriz.pacientes.datos.rm$sex)
part_sex <- PART(sex~., data = matriz.pacientes.datos.rm)
oneR_sex <- OneR(sex~., data = matriz.pacientes.datos.rm)
jrip_sex <- JRip(sex~., data = matriz.pacientes.datos.rm)
# Lo primero que tengo que hacer es convertir el sexo en un factor si no lo es
matriz.pacientes.datos.rm = matriz.pacientes.datos
matriz.pacientes.datos.rm$impuls <- as.factor(matriz.pacientes.datos.rm$impuls)
part_imp <- PART(impuls~., data = matriz.pacientes.datos.rm)
oneR_imp <- OneR(impuls~., data = matriz.pacientes.datos.rm)
jrip_imp <- JRip(impuls~., data = matriz.pacientes.datos.rm)
# Lo primero que tengo que hacer es convertir el sexo en un factor si no lo es
matriz.pacientes.datos.rm = matriz.pacientes.datos
matriz.pacientes.datos.rm$agres <- as.factor(matriz.pacientes.datos.rm$agres)
part_agr <- PART(agres~., data = matriz.pacientes.datos.rm)
oneR_agr <- OneR(agres~., data = matriz.pacientes.datos.rm)
jrip_agr <- JRip(agres~., data = matriz.pacientes.datos.rm)
# Lo primero que tengo que hacer es convertir el sexo en un factor si no lo es
matriz.pacientes.datos.rm = matriz.pacientes.datos
matriz.pacientes.datos.rm <- cbind(matriz.pacientes.datos.rm, dataset$grupo)
matriz.pacientes.datos.rm$`dataset$grupo` <- as.factor(matriz.pacientes.datos.rm$`dataset$grupo`)
part_gru <- PART(`dataset$grupo`~., data = matriz.pacientes.datos.rm)
oneR_gru <- OneR(`dataset$grupo`~., data = matriz.pacientes.datos.rm)
jrip_gru <- JRip(`dataset$grupo`~., data = matriz.pacientes.datos.rm)
# Lo primero que tengo que hacer es convertir el sexo en un factor si no lo es
matriz.pacientes.datos.rm = matriz.pacientes.datos
matriz.pacientes.datos.rm$sex <- as.factor(matriz.pacientes.datos.rm$sex)
part_sex <- PART(sex~., data = matriz.pacientes.datos.rm)
oneR_sex <- OneR(sex~., data = matriz.pacientes.datos.rm)
jrip_sex <- JRip(sex~., data = matriz.pacientes.datos.rm)
print("Reglas sexo PART")
part_sex
print("Regla sexo OneR")
oneR_sex
print("Reglas sexo JRip")
jrip_sex
# Lo primero que tengo que hacer es convertir el sexo en un factor si no lo es
matriz.pacientes.datos.rm = matriz.pacientes.datos
matriz.pacientes.datos.rm$impuls <- as.factor(matriz.pacientes.datos.rm$impuls)
part_imp <- PART(impuls~., data = matriz.pacientes.datos.rm)
oneR_imp <- OneR(impuls~., data = matriz.pacientes.datos.rm)
jrip_imp <- JRip(impuls~., data = matriz.pacientes.datos.rm)
print("Reglas impulsividad PART")
part_imp
print("Regla impulsividad OneR")
oneR_imp
print("Reglas impulsividad JRip")
jrip_imp
# Lo primero que tengo que hacer es convertir el sexo en un factor si no lo es
matriz.pacientes.datos.rm = matriz.pacientes.datos
matriz.pacientes.datos.rm$agres <- as.factor(matriz.pacientes.datos.rm$agres)
part_agr <- PART(agres~., data = matriz.pacientes.datos.rm)
oneR_agr <- OneR(agres~., data = matriz.pacientes.datos.rm)
jrip_agr <- JRip(agres~., data = matriz.pacientes.datos.rm)
print("Reglas agresividad PART")
part_agr
print("Regla Agresividad OneR")
oneR_agr
print("Reglas agresividad JRip")
jrip_agr
# Lo primero que tengo que hacer es convertir el sexo en un factor si no lo es
matriz.pacientes.datos.rm = matriz.pacientes.datos
matriz.pacientes.datos.rm <- cbind(matriz.pacientes.datos.rm, dataset$grupo)
matriz.pacientes.datos.rm$`dataset$grupo` <- as.factor(matriz.pacientes.datos.rm$`dataset$grupo`)
part_gru <- PART(`dataset$grupo`~., data = matriz.pacientes.datos.rm)
oneR_gru <- OneR(`dataset$grupo`~., data = matriz.pacientes.datos.rm)
jrip_gru <- JRip(`dataset$grupo`~., data = matriz.pacientes.datos.rm)
print("Reglas grupo PART")
part_gru
print("Regla grupo OneR")
oneR_gru
print("Reglas grupo JRip")
jrip_gru
knit_with_parameters('D:/Escritorio/Documentos Clase/Universidad/4ºCarrera/2º Cuatrimestre/TFG/Proyecto/codigo.Rmd', encoding = 'UTF-8')
fviz_pca_biplot(resultado.pca, repel = TRUE,
col.var = "#2E9FDF", # Variables color
col.ind = "#696969")  # Individuals color
fviz_pca_biplot(resultado.pca, repel = TRUE,
col.var = "#FF0040", # Color de las variables (vectores)
col.ind = "#21610B")  # Color de cada individuo (puntos)
fviz_pca_biplot(resultado.pca, repel = TRUE,
col.var = "#FF0040", # Color de las variables (vectores)
col.ind = "#21610B",
title = "Plot Binario - Elementos / Dimensiones")  # Color de cada individuo (puntos)
pdf("Imágenes Obtenidas/GraficoEigenvalues.pdf")
plot(plotPCA)
fviz_pca_biplot(resultado.pca, repel = TRUE,
col.var = "#FF0040", # Color de las variables (vectores)
col.ind = "#21610B",
title = "Plot Binario - Elementos / Dimensiones")  # Color de cada individuo (puntos)
dev.off
fviz_pca_biplot(resultado.pca, repel = TRUE,
col.var = "#FF0040", # Color de las variables (vectores)
col.ind = "#21610B",
addEllipses = TRUE,
title = "Plot Binario - Elementos / Dimensiones")  # Color de cada individuo (puntos)
fviz_pca_biplot(resultado.pca, repel = TRUE,
col.var = "#FF0040", # Color de las variables (vectores)
col.ind = "#21610B",
label = "var",
title = "Plot Binario - Elementos / Dimensiones")  # Color de cada individuo (puntos)
fviz_pca_biplot(resultado.pca, repel = TRUE,
col.var = "#FF0040", # Color de las variables (vectores)
col.ind = "#21610B",
label = "var",
title = "Plot Binario - Elementos / Dimensiones",
legend.title = list(fill = "grupo", color = "Clusters"))  # Color de cada individuo (puntos)
fviz_pca_biplot(resultado.pca, repel = TRUE,
col.var = "#FF0040", # Color de las variables (vectores)
col.ind = "#21610B",
label = "var",
title = "Plot Binario - Elementos / Dimensiones",
fill.ind = dataset$grupo,
legend.title = list(fill = "grupo", color = "Clusters"))  # Color de cada individuo (puntos)
fviz_pca_biplot(resultado.pca, repel = TRUE,
col.var = "#FF0040", # Color de las variables (vectores)
col.ind = "#21610B",
label = "var",
title = "Plot Binario - Elementos / Dimensiones",
geom.ind = "point")  # Color de cada individuo (puntos)
fviz_pca_biplot(resultado.pca, repel = TRUE,
col.var = "#FF0040", # Color de las variables (vectores)
col.ind = "#21610B",
label = "var",
title = "Plot Binario - Elementos / Dimensiones",
geom.ind = "point",
pointshape = 21)  # Color de cada individuo (puntos)
fviz_pca_biplot(resultado.pca, repel = TRUE,
col.var = "#FF0040", # Color de las variables (vectores)
col.ind = "#21610B",
label = "var",
title = "Plot Binario - Elementos / Dimensiones",
geom.ind = "point",
pointshape = 20)  # Color de cada individuo (puntos)
fviz_pca_biplot(resultado.pca, repel = TRUE,
col.var = "#FF0040", # Color de las variables (vectores)
col.ind = "#21610B",
label = "var",
title = "Plot Binario - Elementos / Dimensiones",
geom.ind = "point",
pointshape = 15)  # Color de cada individuo (puntos)
fviz_pca_biplot(resultado.pca, repel = TRUE,
col.var = "#FF0040", # Color de las variables (vectores)
col.ind = "#21610B",
label = "var",
title = "Plot Binario - Elementos / Dimensiones",
geom.ind = "point",
pointshape = 12)  # Color de cada individuo (puntos)
fviz_pca_biplot(resultado.pca, repel = TRUE,
col.var = "#FF0040", # Color de las variables (vectores)
col.ind = "#21610B",
label = "var",
title = "Plot Binario - Elementos / Dimensiones",
geom.ind = "point",
pointshape = 10)  # Color de cada individuo (puntos)
fviz_pca_biplot(resultado.pca, repel = TRUE,
col.var = "#FF0040", # Color de las variables (vectores)
col.ind = "#21610B",
label = "var",
title = "Plot Binario - Elementos / Dimensiones",
geom.ind = "point",
pointshape = 1)  # Color de cada individuo (puntos)
fviz_pca_biplot(resultado.pca, repel = TRUE,
col.var = "#FF0040", # Color de las variables (vectores)
col.ind = "#21610B", # Color de cada individuo (puntos)
label = "var",
title = "Plot Binario - Elementos / Dimensiones",
geom.ind = "point",
pointshape = 2)
fviz_pca_biplot(resultado.pca, repel = TRUE,
col.var = "#FF0040", # Color de las variables (vectores)
col.ind = "#21610B", # Color de cada individuo (puntos)
label = "var",
title = "Plot Binario - Elementos / Dimensiones",
geom.ind = "point",
pointshape = 3)
fviz_pca_biplot(resultado.pca, repel = TRUE,
col.var = "#FF0040", # Color de las variables (vectores)
col.ind = "#21610B", # Color de cada individuo (puntos)
label = "var",
title = "Plot Binario - Elementos / Dimensiones",
geom.ind = "point",
pointshape = 4)
ggbiplot(resultado.pca, ellipse=TRUE, labels=rownames(dataset), groups=dataset$grupo)
library(devtools)
install_github("vqv/ggbiplot")
install.packages(devtools)
install.packages("devtools")
install_github("vqv/ggbiplot")
library("devtools")
install_github("vqv/ggbiplot")
ggbiplot(resultado.pca, ellipse=TRUE, labels=rownames(dataset), groups=dataset$grupo)
install.packages("Rtools")
install.packages("rtools")
ggbiplot(resultado.pca, ellipse=TRUE, labels=rownames(dataset), groups=dataset$grupo)
devtools::install_github("vqv/ggbiplot")
devtools::install_github("vqv/ggbiplot", force = T)
library("ggbiplot")
ggbiplot(resultado.pca, ellipse=TRUE, labels=rownames(dataset), groups=dataset$grupo)
pdf("Imágenes Obtenidas/GraficoEigenvalues.pdf")
plot(plotPCA)
fviz_pca_biplot(resultado.pca, repel = TRUE,
col.var = "#FF0040", # Color de las variables (vectores)
col.ind = "#21610B", # Color de cada individuo (puntos)
label = "var",
title = "Plot Binario - Elementos / Dimensiones",
geom.ind = "point",
pointshape = 4)
ggbiplot(resultado.pca, ellipse=TRUE, labels=rownames(dataset), groups=dataset$grupo)
dev.off
plotPCA <- fviz_screeplot(resultado.pca, ncp=24)
plot(plotPCA)
fviz_pca_biplot(resultado.pca, repel = TRUE,
col.var = "#FF0040", # Color de las variables (vectores)
col.ind = "#21610B", # Color de cada individuo (puntos)
label = "var",
title = "Plot Binario - Elementos / Dimensiones",
geom.ind = "point",
pointshape = 4)
ggbiplot(resultado.pca, ellipse=TRUE, labels=rownames(dataset), groups=dataset$grupo)
fviz_pca_ind(resultado.pca, repel = T)
# Saco este gráfico para ver los individuos de una forma más clara
fviz_pca_ind(resultado.pca, repel = T)
pdf("Imágenes Obtenidas/GraficoIndividuosPCA.pdf")
fviz_pca_ind(resultado.pca, repel = T)
dev.off
fviz_nbclust(datos.kmeans, clusters, method = "silhouette")
fviz_nbclust(data.kmeans, clusters, method = "wss")
fviz_nbclust(datos.kmeans, clusters, method = "wss")
